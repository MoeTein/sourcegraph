# -*- mode: ruby -*-
# # vi: set ft=ruby :
# Specify minimum Vagrant version and Vagrant API version
Vagrant.require_version '>= 1.6.0'
VAGRANTFILE_API_VERSION = '2'.freeze
# Require YAML module
require 'yaml'

# Read YAML file with box details
servers = YAML.load_file('servers.yaml')
# Create boxes
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # Iterate through entries in YAML file
  servers.each do |server|
    config.vm.define server['name'] do |srv|
      srv.vm.box = server['box']
      srv.vm.synced_folder '../', '/sourcegraph', type: "rsync", rsync__args: ["--verbose", "--archive", "--delete", "-z"]
      srv.vm.boot_timeout = 600

      # Setup for CI or Local
      case ENV['VAGRANT_RUN_ENV']
      when 'CI'
        project_id = server['project_id']
        external_ip = server['external_ip']
        use_private_ip = server['use_private_ip']
        username = server['username']
        ssh_key_path = server['ssh_key_path']
      else
        project_id = ENV['VAGRANT_GCP_PROJECT_ID'] || 'sourcegraph-server'
        external_ip = nil
        use_private_ip = false
        username = ENV['VAGRANT_SSH_USER'] || ENV['USER']
        ssh_key_path = ENV['VAGRANT_SSH_KEY'] || '~/.ssh/id_rsa'
      end

      srv.vm.provider :google do |g, o|
        g.machine_type = server['machine_type']
        g.image = 'e2e-d6b5231e-2020-09-15t14-08-26z'
        g.image_project_id = 'sourcegraph-ci'
        g.google_project_id = project_id
        g.name = "#{server['name']}-"+"#{Time.now.to_i}"
        g.network = server['network']
        g.external_ip = external_ip
        g.use_private_ip = use_private_ip
        g.disk_size = 40
        g.disk_type = 'pd-ssd'
        o.ssh.username = username
        o.ssh.private_key_path = ssh_key_path
      end

      srv.vm.provision 'shell', inline: <<-SHELL
        #!/usr/bin/env bash


        apt-get update
        apt-get install -y --no-install-recommends jq
        libbz2-dev \
        libffi-dev \
        liblzma-dev \
        libncurses5-dev \
        libncursesw5-dev \
        libreadline-dev \
        libsqlite3-dev \
        libssl-dev \
        llvm \
        python-openssl \
        tk-dev \
        wget \
        xz-utils \
        libpcre3-dev pkg-config musl-tools \
        zlib1g-dev
        ssh-keyscan -H github.com >> /root/.ssh/known_hosts
        NVM_VERSION="$(curl https://api.github.com/repos/nvm-sh/nvm/releases/latest | jq -r .name)"
        curl -L https://raw.githubusercontent.com/nvm-sh/nvm/"$NVM_VERSION"/install.sh | sh
        cat << EOF >> /root/.profile
export ENTERPRISE="1"
export DOCKER_BUILDKIT="1"
export ENTERPRISE="1"
export FORCE_COLOR="3"
export GO111MODULE="on"
export IMAGE="server_instrumented"
export TAG="$a234q234q234q234"
export COVERAGE_INSTRUMENT="true"
export TEST_USER_PASSWORD="SuperSecurePassword"
export VERSION=3.20.0
# export PGPORT=5432
# export PGHOST=localhost
export PGUSER=postgres
# export PGPASSWORD=sourcegraph
export PGDATABASE=postgres
export PGSSLMODE=disable
EOF

      SHELL

      server['shell_commands'].each do |sh|
        srv.vm.provision 'shell', inline: sh
      end
    end
  end
end
